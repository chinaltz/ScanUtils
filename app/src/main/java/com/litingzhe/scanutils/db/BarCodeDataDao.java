package com.litingzhe.scanutils.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.litingzhe.scanutils.model.BarCodeData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BAR_CODE_DATA".
*/
public class BarCodeDataDao extends AbstractDao<BarCodeData, Long> {

    public static final String TABLENAME = "BAR_CODE_DATA";

    /**
     * Properties of entity BarCodeData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BarCodeId = new Property(0, Long.class, "barCodeId", true, "_id");
        public final static Property BarCode = new Property(1, String.class, "barCode", false, "BAR_CODE");
        public final static Property BarCodeType = new Property(2, String.class, "barCodeType", false, "BAR_CODE_TYPE");
        public final static Property CreatDate = new Property(3, java.util.Date.class, "creatDate", false, "CREAT_DATE");
    }


    public BarCodeDataDao(DaoConfig config) {
        super(config);
    }
    
    public BarCodeDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BAR_CODE_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: barCodeId
                "\"BAR_CODE\" TEXT," + // 1: barCode
                "\"BAR_CODE_TYPE\" TEXT," + // 2: barCodeType
                "\"CREAT_DATE\" INTEGER);"); // 3: creatDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BAR_CODE_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BarCodeData entity) {
        stmt.clearBindings();
 
        Long barCodeId = entity.getBarCodeId();
        if (barCodeId != null) {
            stmt.bindLong(1, barCodeId);
        }
 
        String barCode = entity.getBarCode();
        if (barCode != null) {
            stmt.bindString(2, barCode);
        }
 
        String barCodeType = entity.getBarCodeType();
        if (barCodeType != null) {
            stmt.bindString(3, barCodeType);
        }
 
        java.util.Date creatDate = entity.getCreatDate();
        if (creatDate != null) {
            stmt.bindLong(4, creatDate.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BarCodeData entity) {
        stmt.clearBindings();
 
        Long barCodeId = entity.getBarCodeId();
        if (barCodeId != null) {
            stmt.bindLong(1, barCodeId);
        }
 
        String barCode = entity.getBarCode();
        if (barCode != null) {
            stmt.bindString(2, barCode);
        }
 
        String barCodeType = entity.getBarCodeType();
        if (barCodeType != null) {
            stmt.bindString(3, barCodeType);
        }
 
        java.util.Date creatDate = entity.getCreatDate();
        if (creatDate != null) {
            stmt.bindLong(4, creatDate.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BarCodeData readEntity(Cursor cursor, int offset) {
        BarCodeData entity = new BarCodeData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // barCodeId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // barCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // barCodeType
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // creatDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BarCodeData entity, int offset) {
        entity.setBarCodeId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBarCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBarCodeType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreatDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BarCodeData entity, long rowId) {
        entity.setBarCodeId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BarCodeData entity) {
        if(entity != null) {
            return entity.getBarCodeId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BarCodeData entity) {
        return entity.getBarCodeId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
